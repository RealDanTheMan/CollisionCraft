#version 330

in vec3 pix_position;
in vec3 pix_normal;

out vec4 frag_color;

struct lightSettings
{
    vec3 dir;
    vec3 color;
    float intensity;
};


struct blinnPhongInputs
{
    vec3 normal;
    vec3 view_dir;
    vec3 specular;
    lightSettings light;
};


lightSettings defaulLight()
{
    return lightSettings(
        normalize(vec3(0.5, 0.5, 1.0)),
        vec3(1.0, 1.0, 1.0),
        1.0
    );
}

/// Caluclates Blinn-Phong lighting model.
vec3 computeBlinnPhong(blinnPhongInputs inputs)
{
    // Blinn-Phong coefficients.
    vec3 half_dir = normalize(inputs.light.dir + inputs.view_dir);
    float NdotL = dot(inputs.normal, inputs.light.dir);
    float lambertian = max(NdotL, 0.0);
    float specAngle = max(dot(half_dir, inputs.normal), 0.0);
    float spec = pow(specAngle, 32.0);

    // Blinn-Phong light components.
    vec3 direct = lambertian * inputs.light.color;
    vec3 specular = spec * inputs.light.color * inputs.light.intensity * inputs.specular; 
    return direct + specular;
}

/// Main pixel shader entry point.
void main()
{
    blinnPhongInputs light_inputs;
    light_inputs.normal = pix_normal;
    light_inputs.view_dir = vec3(0, 0, -1.0);
    light_inputs.specular = vec3(1.0, 1.0, 1.0);
    light_inputs.light = defaulLight();

    vec3 ambience = vec3(0.1, 0.1, 0.1);
    vec3 normal_color = pix_normal * 0.5 + 0.5;
    vec3 light = computeBlinnPhong(light_inputs) + ambience;
    frag_color = vec4(normal_color * light, 1.0);
}
